# -*- coding: utf-8 -*-
"""diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NwxJmqzGVgSZ6qKzT0qsip0cu2ROqqfX

Importing all required modules
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data collection and Analysis"""

# loading the diabetes dataset to dataframe
data_set = pd.read_csv("/diabetes.csv")

data_set.head()

# no. of rows and columns in the data_set
data_set.shape

# getting stastical data
data_set.describe()

data_set["Outcome"].value_counts()

data_set.groupby("Outcome").mean()

# separating the data and lablels
X = data_set.drop(columns = "Outcome", axis = 1)
Y = data_set["Outcome"]

"""Data Standardization"""

scalar = StandardScaler()
standard_data = scalar.fit_transform(X)

print(standard_data)

X = standard_data
Y = data_set["Outcome"]

"""Train and split data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size = 0.2, stratify = Y, random_state = 1)

print(Y.shape, X_train.shape, Y_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel = "linear")

# training the support vector machine
classifier.fit(X_train, Y_train)

"""Model Evaluation Accuracy Score"""

# accuracy score for training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print(training_data_accuracy)

# accuracy score for testing data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print(test_data_accuracy)
# data_set.isnull().sum()

"""Predictive System"""

input_data = (10, 168, 74, 0, 0, 38, 0.537, 34)

# changing input_data into numpy array
input_data_as_numpy = np.asarray(input_data)

# reshaping the data to make the model to predict only for row
input_data_reshaped = input_data_as_numpy.reshape(1, -1)

# standardize the input_data_reshaped
std_data = scalar.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)